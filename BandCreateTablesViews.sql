FFF-- MySQL Script generated by MySQL Workbench
-- 02/21/17 01:19:24
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema band
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema band
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `band` DEFAULT CHARACTER SET utf8 ;
USE `band` ;

-- -----------------------------------------------------
-- Table `band`.`BAND`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `band`.`BAND` (
  `BandID` INT NOT NULL AUTO_INCREMENT,
  `BandName` VARCHAR(45) NOT NULL,
  `NumberOfReleases` INT NOT NULL,
  `BandHomeState` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`BandID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `band`.`LABEL`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `band`.`LABEL` (
  `LabelID` INT NOT NULL AUTO_INCREMENT,
  `LabelName` VARCHAR(45) NOT NULL,
  `Address` VARCHAR(100) NULL,
  `Phone` VARCHAR(45) NULL,
  `Email` VARCHAR(45) NULL,
  `NumberOfReleases` INT NOT NULL,
  PRIMARY KEY (`LabelID`),
  UNIQUE INDEX `Email_UNIQUE` (`Email` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `band`.`ALBUM`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `band`.`ALBUM` (
  `AlbumID` INT NOT NULL AUTO_INCREMENT,
  `AlbumName` VARCHAR(45) NOT NULL,
  `Year` YEAR NOT NULL,
  `Formats` VARCHAR(45) NOT NULL,
  `BAND_BandID` INT NOT NULL,
  `LABEL_LabelID` INT NOT NULL,
  INDEX `fk_ALBUM_BAND_idx` (`BAND_BandID` ASC),
  UNIQUE INDEX `AlbumID_UNIQUE` (`AlbumID` ASC),
  INDEX `fk_ALBUM_LABEL1_idx` (`LABEL_LabelID` ASC),
  PRIMARY KEY (`AlbumID`),
  CONSTRAINT `fk_ALBUM_BAND`
    FOREIGN KEY (`BAND_BandID`)
    REFERENCES `band`.`BAND` (`BandID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ALBUM_LABEL1`
    FOREIGN KEY (`LABEL_LabelID`)
    REFERENCES `band`.`LABEL` (`LabelID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `band`.`LABEL_BAND`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `band`.`LABEL_BAND` (
  `BAND_BandID` INT NOT NULL,
  `LABEL_LabelID` INT NOT NULL,
  PRIMARY KEY (`BAND_BandID`, `LABEL_LabelID`),
  INDEX `fk_BAND_has_LABEL_LABEL1_idx` (`LABEL_LabelID` ASC),
  INDEX `fk_BAND_has_LABEL_BAND1_idx` (`BAND_BandID` ASC),
  CONSTRAINT `fk_BAND_has_LABEL_BAND1`
    FOREIGN KEY (`BAND_BandID`)
    REFERENCES `band`.`BAND` (`BandID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BAND_has_LABEL_LABEL1`
    FOREIGN KEY (`LABEL_LabelID`)
    REFERENCES `band`.`LABEL` (`LabelID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

#View to Select a specific Label and the Albums it released
#The WHERE clause can be changed to a label name to make a view for that specific label
CREATE VIEW AlbumsFromLabelView AS
	SELECT LabelName, AlbumName, BandName, Year, Formats
    FROM band AS B JOIN album AS A
	ON B.BandID= A.BAND_BandID
		JOIN label AS L
			ON A.LABEL_LabelID = L.LabelID
    WHERE LabelName = 'Victory Records';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
